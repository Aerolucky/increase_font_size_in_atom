Object.defineProperty(exports, '__esModule', {
	value: true
});
/** @babel */

var ScriptRunnerProcess = require('./script-runner-process');
var ScriptRunnerView = require('./script-runner-view');

var ChildProcess = require('child_process');
var ShellEnvironment = require('shell-environment');

var Path = require('path');
var Shellwords = require('shellwords');

var _require = require('atom');

var CompositeDisposable = _require.CompositeDisposable;

var SCRIPT_RUNNER_URI = 'script-runner://';

exports['default'] = {
	config: {
		splitDirection: {
			type: 'string',
			'default': 'bottom',
			'enum': ['left', 'right', 'bottom']
		},

		scrollbackDistance: {
			type: 'number',
			'default': 555
		},

		clearBeforeExecuting: {
			type: 'boolean',
			'default': true
		},

		theme: {
			type: 'string',
			'default': 'light',
			'enum': [{ value: 'light', description: "Light" }, { value: 'dark', description: "Dark" }]
		}
	},

	commandMap: [{ scope: '^source\\.coffee', command: 'coffee' }, { scope: '^source\\.js', command: 'node' }, { scope: '^source\\.(embedded\\.)?ruby', command: 'ruby' }, { scope: '^source\\.python', command: 'python' }, { scope: '^source\\.go', command: 'go run' }, { scope: '^text\\.html\\.php', command: 'php' }, { scope: 'Shell Script (Bash)', command: 'bash' }, { path: 'spec\\.coffee$', command: 'jasmine-node --coffee' }, { path: '\\.sh$', command: 'bash' }],

	disposables: null,

	activate: function activate() {
		var _this = this;

		this.disposables = new CompositeDisposable();

		this.disposables.add(atom.workspace.addOpener(function (uri) {
			if (uri.startsWith(SCRIPT_RUNNER_URI)) {
				return new ScriptRunnerView(uri);
			}
		}));

		// register commands
		this.disposables.add(atom.commands.add('atom-workspace', {
			'script-runner:run': function scriptRunnerRun(event) {
				return _this.run();
			},
			'script-runner:shell': function scriptRunnerShell(event) {
				return _this.runShell();
			}
		}));
	},

	deactivate: function deactivate() {
		this.disposables.dispose();
	},

	runShell: function runShell() {
		var editor = atom.workspace.getActiveTextEditor();
		if (editor == null) {
			return;
		}

		var path = Path.dirname(editor.getPath());

		atom.workspace.open('script-runner://shell', {
			searchAllPanes: true
		}).then(function (view) {
			view.setTitle('Shell');

			ShellEnvironment.loginEnvironment(function (error, environment) {
				if (environment) {
					var cmd = environment['SHELL'];
					var args = Shellwords.split(cmd).concat("-l");

					ScriptRunnerProcess.spawn(view, args, path, environment);
				} else {
					throw new Error(error);
				}
			});
		});
	},

	run: function run() {
		var editor = atom.workspace.getActiveTextEditor();
		if (editor == null) {
			return;
		}

		var path = editor.getPath();
		var cmd = this.commandFor(editor);

		if (cmd == null) {
			alert('Not sure how to run: ' + path);
			return false;
		}

		atom.workspace.open('script-runner://' + path, {
			searchAllPanes: true
		}).then(function (view) {
			view.setTitle(path);

			ShellEnvironment.loginEnvironment(function (error, environment) {
				if (environment) {
					ScriptRunnerProcess.run(view, cmd, environment, editor);
				} else {
					throw new Error(error);
				}
			});
		});
	},

	scopesFor: function scopesFor(editor) {
		var selection = editor.getLastSelection();

		if (selection != null && !selection.isEmpty()) {
			var bufferPosition = selection.getBufferRange().start;
			return editor.scopeDescriptorForBufferPosition(bufferPosition).scopes.reverse();
		} else {
			return editor.getRootScopeDescriptor().scopes.reverse();
		}
	},

	commandFor: function commandFor(editor) {
		var firstRowIndex = 0;

		var selection = editor.getLastSelection();
		if (selection != null && !selection.isEmpty()) {
			firstRowIndex = selection.getBufferRowRange()[0];
		}

		// Try to extract from the shebang line:
		var firstLine = editor.lineTextForBufferRow(firstRowIndex);
		if (firstLine.match('^#!')) {
			return firstLine.substr(2);
		}

		// Try to extract matching scopes:
		var scopes = this.scopesFor(editor);
		console.log("Script Runner Scopes", scopes);

		// Lookup using the command map:
		var path = editor.getPath();
		for (var method of Array.from(this.commandMap)) {
			if (method.fileName && path != null) {
				if (path.match(method.path)) {
					return method.command;
				}
			} else if (method.scope) {
				for (var scope of scopes) {
					if (scope.match(method.scope)) {
						return method.command;
					}
				}
			}
		}
	}
};
module.exports = exports['default'];
//# sourceMappingURL=data:application/json;charset=utf-8;base64,